#include <stdio.h>
int n, nf;
int in[100];
int p[50];
int hit = 0; // for counting no-faults
int i, j, k;
int pgfaultcnt = 0; // for counting page faults

// Function for taking input from the user
void Getdata() {
  printf("Enter the length of reference sequence:\n"); // for taking length of
                                                       // string from user
  scanf("%d", &n);
  printf("Enter the page reference sequence:\n"); // for taking string from user
  for (i = 0; i < n; i++) {
    scanf("%d", &in[i]);
  }
  printf("Enter the number of page frames:\n"); // taking number of page frames
                                                // from the user
  scanf("%d", &nf);
}
// Function ends

// Function to initializing the page frames array
void initialize() {
  pgfaultcnt = 0;
  for (i = 0; i < nf; i++)
    p[i] = 9999;
}
// Function ends

// Function to count no-faults
int isHit(int data) {
  hit = 0;
  for (j = 0; j < nf; j++) {
    if (p[j] == data) {
      hit = 1;
      break;
    }
  }

  return hit;
}
// Function ends

// Function to get the index of the no-faults
int getHitIndex(int data) {
  int hitind;
  for (k = 0; k < nf; k++) {
    if (p[k] == data) {
      hitind = k;
      break;
    }
  }
  return hitind;
}
// Function ends

// Function to display pages
void dispPages() {
  for (k = 0; k < nf; k++) {
    if (p[k] != 9999)
      printf(" %d", p[k]);
  }
}
// Function ends

// Function to display count of page faults
void dispPgFaultCnt() { printf("\nTotal no of page faults:%d", pgfaultcnt); }
// Function ends

// Function to implement FIFO Page Replacement Algorithm
void fifo() {
  initialize();
  for (i = 0; i < n; i++) {
    printf("\nFor %d :", in[i]);

    if (isHit(in[i]) == 0) {

      for (k = 0; k < nf - 1; k++)
        p[k] = p[k + 1];

      p[k] = in[i];
      pgfaultcnt++;
      dispPages();
    } else
      printf("No page fault");
  }
  dispPgFaultCnt();
}
// Function ends

// Main function
int main() {
  Getdata();
  fifo();
  return 0;
}
